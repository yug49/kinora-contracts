{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_cinftContractAddress",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "Legacy__InvalidNominee",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Legacy__NoNFTsToClaim",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Legacy__TheNFTReceivedIsNotFromTheDesiredCollection",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Legacy__TheNFTReceivedIsNotFromTheMinter",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Legacy__TheRefreshTimeHasNotPassed",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "subscriber",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address[]",
						"name": "nominees",
						"type": "address[]"
					}
				],
				"name": "Claimed",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "REFRESH_TIME",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_subscriber",
						"type": "address"
					}
				],
				"name": "claim",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getLastPingedTimeStamp",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "i_cinft",
				"outputs": [
					{
						"internalType": "contract ICINFT",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "onERC721Received",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ping",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Yug Agarwal",
			"details": "This contract helps NFT minters to will their NFTs to their nominees in case they forget to ping the contract within a year. The minter can send their NFT to this contract along with the nominee's address
			"kind": "dev",
			"methods": {
				"claim(address)": {
					"params": {
						"_subscriber": "The address of the subscriber whose nominees are claiming the NFTs. Allows anyone to claim the NFTs on behalf of the nominees if the subscriber has not pinged within the REFRESH_TIME. It will be called automatically by the backend service also that will be keeping the note of the time."
					}
				},
				"constructor": {
					"details": "Sets the address of the CINFT contract.",
					"params": {
						"_cinftContractAddress": "The address of the CINFT contract."
					}
				},
				"getLastPingedTimeStamp()": {
					"details": "Returns the last pinged timestamp of the caller.",
					"returns": {
						"_0": "The last pinged timestamp."
					}
				},
				"onERC721Received(address,address,uint256,bytes)": {
					"details": "Handles the receipt of an NFT.",
					"params": {
						"data": "Additional data with no specified format. It constains the nominee's address only.",
						"from": "The address that previously owned the NFT.",
						"tokenId": "The ID of the NFT being transferred."
					},
					"returns": {
						"_0": "bytes4 A selector to confirm the callback execution. The user just have to safeTransferFrom their NFT to this contract with the nominee's address as data. and the nominee will be added here for him in this contract."
					}
				},
				"ping()": {
					"details": "Allows subscribers to update their last pinged time to the current block timestamp."
				}
			},
			"title": "Legacy contract",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Legacy.sol": "Legacy"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0xf78f05f3b8c9f75570e85300d7b4600d7f6f6a198449273f31d44c1641adb46f",
			"license": "MIT",
			"urls": [
				"bzz-raw://e28b872613b45e0e801d4995aa4380be2531147bfe2d85c1d6275f1de514fba3",
				"dweb:/ipfs/QmeeFcfShHYaS3BdgVj78nxR28ZaVUwbvr66ud8bT6kzw9"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0x88cd5e3bee2e8c36b8d9058fbcaa81ad5704281b25634122234b55ea853d8055",
			"license": "MIT",
			"urls": [
				"bzz-raw://8dc7e7ab5b8ea36c15027ab04221b05d1c970f47a53e9fd47ead8ca665d49c7e",
				"dweb:/ipfs/Qmeeph7fsDyfRr8vb2L8KcDEmKPb224TAayMvgqgGAnqpL"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c",
			"license": "MIT",
			"urls": [
				"bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617",
				"dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u"
			]
		},
		"ICINFT.sol": {
			"keccak256": "0x266fe1ede4c548d27d7153fb9c6feb02ef168a78b84284cbb6014a095fca2559",
			"license": "MIT",
			"urls": [
				"bzz-raw://5676aade6e9b90eb5f2b4728dbb3acd3bdf3ff28d98c56f026776ddb1831a711",
				"dweb:/ipfs/QmZVxrCFtDhpkRy8TwD5afbCU2njtT2QqckGnYPcTJLxwY"
			]
		},
		"Legacy.sol": {
			"keccak256": "0xe294c2c71b349ce987521e38197a7193d06a9c0051b2eb588840f3b40b76a629",
			"license": "MIT",
			"urls": [
				"bzz-raw://ac52323593525b2632259a3f8be24e327a64506de4c3aab1d34fb006aa11240c",
				"dweb:/ipfs/QmdFxqu1Hpnt8CK4CYHm61eMo6rRzXCZfaTyEAwE8tS3Vr"
			]
		}
	},
	"version": 1
}